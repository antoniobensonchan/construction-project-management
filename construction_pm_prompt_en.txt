# Construction Project Management System - Detailed Development Prompt (English)

## System Overview
Create a professional construction project management system using Django 4.2.7, focusing on the complete workflow of "PDF drawing upload + task association + annotation functionality". The system adopts a modern three-tier architecture: User → Project → WorkSite → Tasks/Drawings, supporting multi-user, multi-project, and multi-worksite complex construction scenario management.

## Core Data Model Design

### 1. User Authentication System (accounts app)
- Extend Django AbstractUser to create custom user model
- Fields: username, email, company_name, phone, created_at, updated_at
- Implement complete login/registration/logout functionality
- Support user profile management and permission control

### 2. Project Management System (projects app)
**Project Model:**
- Fields: owner(ForeignKey to User), name, description, start_date, end_date
- Status choices: planning, active, completed, suspended, cancelled
- Methods: duration_days, progress_percentage, clean(data validation)

**WorkSite Model:**
- Fields: project(ForeignKey to Project), name, description, location
- site_manager, contact_phone
- Status choices: preparing, active, completed, suspended
- Statistical methods: task_count, drawing_count

### 3. Drawing Management System (drawings app)
**Drawing Model:**
- Fields: worksite(ForeignKey to WorkSite), name, file(FileField)
- Supported formats: PDF, JPG, JPEG, PNG, BMP, TIFF
- Auto fields: file_size_mb, page_count, uploaded_at
- Validation features: PDF compatibility detection (PDF 1.5-1.7), file integrity verification, file size limit (≤10MB)
- Thumbnail generation: Smart 16:9 ratio thumbnails with auto-cropping
- Methods: validate_pdf(), validate_image(), generate_thumbnail()

### 4. Task Management System (tasks app)
**Task Model:**
- Fields: worksite(ForeignKey to WorkSite), parent_task(self-referential for subtasks), name, description
- task_type choices: new_construction, repair, inspection, maintenance
- status choices: pending, in_progress, completed, cancelled
- responsible_person, deadline
- Property method: project (indirectly associated through worksite)

**TaskAnnotation Model:**
- Fields: task(ForeignKey to Task), drawing(ForeignKey to Drawing), annotation_type, page_number
- Coordinate fields: x_coordinate, y_coordinate, width, height, end_x, end_y
- annotation_type choices: point, rectangle, text, line
- color choices: red, blue, green, yellow, orange, purple, black
- content, created_at

## Frontend Interface Design Requirements

### 1. Technology Stack
- Bootstrap 5.1.3 responsive framework
- Font Awesome 6.0 icon library
- Custom CSS animations
- Vanilla JavaScript (no jQuery required)
- Drag-and-drop upload support

### 2. Page Layout
**Base Template (base.html):**
- Responsive navigation bar: Project Management, Task Management, Drawing Management, User Center
- Breadcrumb navigation
- Message notification system (Django messages)
- Unified footer design

**Project List Page:**
- Card-based layout displaying all projects
- Each project card shows: project name, status, progress bar, worksite count, task count, drawing count
- Support project status filtering and search functionality
- Create new project button

**Project Detail Page:**
- Tab design: Project Overview, WorkSite Management, Drawing Summary, Task Summary
- WorkSite Management: Display all worksites, support create/edit/delete worksites
- Drawing Summary: Display summary of all worksite drawings, but no direct upload at project level
- Task Summary: Display summary of all worksite tasks, but no direct creation at project level

**WorkSite Detail Page:**
- WorkSite basic information display
- WorkSite drawing management: upload drawings, drawing list, drawing preview
- WorkSite task management: create tasks, task list, task status statistics
- WorkSite statistics charts: task completion rate, drawing count statistics

### 3. Drawing Functionality Interface
**Drawing Upload Page:**
- Drag-and-drop upload area with click-to-select file support
- Real-time file validation: format check, size check, integrity check
- Upload progress bar display
- Drawing name input field
- Auto-redirect to drawing list after successful upload

**Drawing List Page:**
- Grid layout displaying drawing thumbnails
- Each drawing card shows: thumbnail, drawing name, file size, upload time, page count
- Support filtering by worksite, sorting by upload time
- Drawing operations: view details, download, delete

**Drawing Detail Page:**
- PDF/image viewer: support zoom in/out, drag to view, keyboard navigation
- Multi-page PDF support: page navigation, page switching
- Drawing information panel: filename, worksite, project, file size, upload time
- Associated tasks display: show all tasks using this drawing
- Annotation display: show all annotations on drawing, support filtering by task

### 4. Task Functionality Interface
**Task Creation Page:**
- Step-by-step form design
- Step 1: Basic info - task name, type, responsible person, deadline, description
- Step 2: Drawing association - select from worksite drawings with real-time preview
- Step 3: Annotation addition - add annotations on selected drawing
- Form validation: required field checks, date validity checks

**Task List Page:**
- Table or card layout displaying tasks
- Task information: name, type, status, responsible person, deadline, worksite, project
- Status badges: different colors for different task statuses
- Action buttons: view details, edit, delete
- Filter functionality: by status, by worksite, by deadline

**Task Detail Page:**
- Task basic information display
- WorkSite drawing preview: display all worksite drawings, support drawing switching
- Annotation display: show task-related annotations on drawings
- Annotation management: show/hide annotations, annotation list, delete annotations
- Action buttons: edit task, return to worksite, view project

**Task Edit Page:**
- Task information edit form
- WorkSite drawing preview and annotation editor
- Annotation toolbar: point marker, rectangle marker, text annotation, line annotation
- Annotation property settings: color selection, content input
- Annotation management: annotation list, individual delete, batch clear

## Core Functionality Implementation Requirements

### 1. Drawing Upload and Processing
- Support drag-and-drop and click upload
- File format validation: only allow PDF, JPG, JPEG, PNG, BMP, TIFF
- File size limit: maximum 10MB
- PDF compatibility detection: support PDF 1.5-1.7 versions
- File integrity verification: auto-detect corrupted files
- Thumbnail generation: use pdf2image and Pillow to generate 16:9 ratio thumbnails
- Multi-page PDF support: auto-detect page count, support page navigation

### 2. Annotation System Implementation
**Frontend Annotation Editor:**
- Use HTML5 Canvas or SVG for annotation drawing
- Support four annotation types: point marker, rectangle marker, text annotation, line annotation
- Annotation toolbar: tool selection, color selection, undo/redo
- Annotation interaction: hover to show content, click to edit, drag to move
- Annotation data format: JSON format storing coordinates and property information

**Backend Annotation API:**
- Create annotation: POST /tasks/annotation/create/
- Get annotations: GET /tasks/{task_id}/annotations/
- Update annotation: PUT /tasks/annotation/{annotation_id}/update/
- Delete annotation: DELETE /tasks/annotation/{annotation_id}/delete/
- Batch operations: support batch delete, batch update

### 3. Drawing Preview Functionality
- PDF preview: use HTML embed tag or PDF.js
- Image preview: native img tag with zoom and drag support
- Zoom controls: zoom in, zoom out, reset, fit to window
- Keyboard navigation: arrow keys to move, +/- to zoom, spacebar to reset
- Fullscreen mode: support fullscreen drawing view

### 4. Permissions and Security
- User authentication: Django built-in authentication system
- Permission control: users can only access their own projects and data
- File security: upload file type checking, file size limits
- CSRF protection: all forms include CSRF token
- XSS protection: template auto-escaping of user input

## Data Flow and Business Logic

### 1. User Workflow
1. User registers/logs into system
2. Creates project, sets project basic information
3. Creates worksites under project, sets worksite information
4. Uploads drawings (PDF/images) in worksite
5. Creates tasks in worksite, associates with worksite drawings
6. Adds drawing annotations in tasks, marks important locations
7. Views task details, manages annotation information
8. Views data through project/worksite/task multi-dimensional perspectives

### 2. Data Relationship Logic
- User → Project (one-to-many)
- Project → WorkSite (one-to-many)
- WorkSite → Drawing (one-to-many)
- WorkSite → Task (one-to-many)
- Task → Annotation (one-to-many)
- Drawing → Annotation (one-to-many)
- Task ↔ Drawing (associated through annotations)

### 3. Core Business Rules
- Drawings can only be uploaded at worksite level, not directly at project level
- Tasks can only be created at worksite level, not directly at project level
- Annotations must be associated with both task and drawing
- Annotations can only be created on drawings belonging to the task's worksite
- Users can only access projects they created and their subordinate data

## Technical Implementation Details

### 1. Django Configuration
- Django 4.2.7
- SQLite database (development environment)
- Middleware: CORS, CSRF, authentication middleware
- Static files: Bootstrap, Font Awesome, custom CSS/JS
- Media files: user-uploaded drawing files

### 2. Python Dependencies
```
Django==4.2.7
Pillow==10.1.0
django-cors-headers==4.3.1
python-decouple==3.8
PyPDF2==3.0.1
pdf2image==1.16.3
```

### 3. URL Routing Design
- / → Redirect to project list (login required)
- /accounts/ → User authentication related pages
- /projects/ → Project management related pages
- /drawings/ → Drawing management related pages
- /tasks/ → Task management related pages
- /admin/ → Django admin backend

### 4. Template Structure
- templates/base.html → Base template
- templates/accounts/ → User authentication templates
- templates/projects/ → Project management templates
- templates/drawings/ → Drawing management templates
- templates/tasks/ → Task management templates

### 5. Static File Structure
- static/css/custom.css → Custom styles
- static/js/custom.js → Custom JavaScript
- static/images/ → System image resources

## Testing and Acceptance Criteria

### 1. Functional Testing
- User registration/login functionality works properly
- Project creation and management functionality works properly
- WorkSite creation and management functionality works properly
- Drawing upload and preview functionality works properly
- Task creation and management functionality works properly
- Annotation addition and display functionality works properly

### 2. Performance Testing
- 10MB PDF file upload time < 30 seconds
- Drawing preview loading time < 5 seconds
- Annotation response time < 1 second
- Page loading time < 3 seconds

### 3. Compatibility Testing
- Chrome 100+ browser support
- Firefox 90+ browser support
- Safari 14+ browser support
- Responsive design supports mobile devices

### 4. Security Testing
- File upload security checks
- User permission isolation checks
- CSRF attack protection checks
- XSS attack protection checks

Please implement the complete construction project management system according to the above detailed requirements, ensuring all functional modules work together harmoniously and provide an excellent user experience.
